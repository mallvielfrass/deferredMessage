definitions:
  admin.AdminResponse:
    properties:
      isAdmin:
        type: boolean
      user:
        $ref: '#/definitions/admin.UserResponse'
    type: object
  admin.EncryptedData:
    properties:
      token:
        type: string
    type: object
  admin.UserResponse:
    properties:
      _id:
        type: string
      admin:
        type: boolean
      mail:
        type: string
      name:
        type: string
    type: object
  bot.BotRequest:
    properties:
      botLink:
        type: string
      name:
        type: string
      platform:
        type: string
      token:
        type: string
    required:
    - name
    - platform
    type: object
  bot.BotResponse:
    properties:
      _id:
        type: string
      botLink:
        type: string
      creator:
        type: string
      name:
        type: string
      platform:
        type: string
      token:
        type: string
    required:
    - name
    - platform
    type: object
  bot.BotStructArrayResponse:
    properties:
      bots:
        items:
          $ref: '#/definitions/bot.BotResponse'
        type: array
    type: object
  bot.BotStructResponse:
    properties:
      bot:
        $ref: '#/definitions/bot.BotResponse'
    type: object
  bot.BotUpdateRequest:
    properties:
      name:
        type: string
      platform:
        type: string
      token:
        type: string
    type: object
  chat.ChatRequest:
    properties:
      botId:
        type: string
      linkOrIdInBot:
        type: string
      name:
        type: string
    type: object
  chat.ChatsListResponse:
    properties:
      chats:
        items:
          $ref: '#/definitions/models.ChatScheme'
        type: array
      count:
        type: integer
      offset:
        type: integer
    type: object
  chat.CreateChatResponse:
    properties:
      chat:
        $ref: '#/definitions/chat.createdChatType'
    type: object
  chat.createdChatType:
    properties:
      _id:
        type: string
      botId:
        type: string
      botIdentifier:
        type: string
      linker:
        type: string
      name:
        type: string
      verified:
        type: boolean
    type: object
  models.ChatScheme:
    properties:
      botID:
        type: string
      botIdentifier:
        type: string
      creator:
        type: string
      hidden:
        type: boolean
      id:
        type: string
      linkOrIdInBot:
        type: string
      name:
        type: string
      verified:
        type: boolean
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
      reason:
        type: string
    type: object
  models.SuccessResponse:
    properties:
      status:
        type: string
    type: object
  noauth.CheckUserRequest:
    properties:
      mail:
        type: string
    type: object
  noauth.LoginBody:
    properties:
      mail:
        type: string
      password:
        type: string
    required:
    - mail
    - password
    type: object
  noauth.RegisterBody:
    properties:
      mail:
        type: string
      name:
        description: json tag to de-serialize json body
        type: string
      password:
        type: string
    required:
    - mail
    - name
    - password
    type: object
  noauth.RegisterUserResponse:
    properties:
      session:
        $ref: '#/definitions/noauth.Session'
      status:
        type: string
      user:
        $ref: '#/definitions/noauth.User'
    type: object
  noauth.Session:
    properties:
      _id:
        type: string
      expire:
        type: integer
    type: object
  noauth.StatusResponse:
    properties:
      status:
        type: string
    type: object
  noauth.User:
    properties:
      mail:
        type: string
      name:
        type: string
    type: object
  user.MessageResponse:
    properties:
      message:
        example: pong
        type: string
    type: object
info:
  contact: {}
paths:
  /api/admin/:
    post:
      consumes:
      - application/json
      description: Sets the authenticated user as an admin.
      parameters:
      - description: Encrypted data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/admin.EncryptedData'
      produces:
      - application/json
      responses:
        "200":
          description: Admin status set successfully
          schema:
            $ref: '#/definitions/admin.AdminResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Set a user as admin
      tags:
      - Admin
  /api/auth/user/ping:
    get:
      consumes:
      - application/json
      description: Returns a "pong" message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.MessageResponse'
      security:
      - Bearer: []
      summary: Ping
      tags:
      - user
  /api/bot:
    get:
      description: Retrieves a list of all bots for user
      produces:
      - application/json
      responses:
        "200":
          description: List of bots retrieved successfully
          schema:
            $ref: '#/definitions/bot.BotStructArrayResponse'
        "400":
          description: Error getting bots
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a list of all bots
      tags:
      - Bot
  /api/bot/:
    post:
      consumes:
      - application/json
      description: Create a new bot with the provided information
      parameters:
      - description: Bot request body
        in: body
        name: botRequest
        required: true
        schema:
          $ref: '#/definitions/bot.BotRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Bot created successfully
          schema:
            $ref: '#/definitions/bot.BotStructResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new bot
      tags:
      - Bot
  /api/bot/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing bot with the provided information
      parameters:
      - description: Bot ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Bot request body
        in: body
        name: botRequest
        required: true
        schema:
          $ref: '#/definitions/bot.BotUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Bot updated successfully
          schema:
            $ref: '#/definitions/bot.BotStructResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update an existing bot
      tags:
      - Bot
  /api/chat:
    get:
      consumes:
      - application/json
      description: Retrieves a list of chats created by the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: List of chats
          schema:
            $ref: '#/definitions/chat.ChatsListResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Get chats list
      tags:
      - Chat
    post:
      consumes:
      - application/json
      description: Creates a new chat with the provided chat details.
      parameters:
      - description: Chat details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/chat.ChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Chat created successfully
          schema:
            $ref: '#/definitions/chat.CreateChatResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a chat
      tags:
      - Chat
  /api/chat/{id}:
    put:
      consumes:
      - application/json
      description: Updates the settings of a chat identified by the provided ID.
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        type: string
      - description: Chat name
        in: body
        name: name
        schema:
          type: string
      - description: Link or ID in bot
        in: body
        name: linkOrIdInBot
        schema:
          type: string
      responses:
        "200":
          description: Settings updated successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Update chat settings
      tags:
      - Chat
  /api/noauth/check:
    post:
      consumes:
      - application/json
      description: Checks if a user exists based on the provided registration information.
      parameters:
      - description: Check user request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/noauth.CheckUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User does not exist
          schema:
            $ref: '#/definitions/noauth.StatusResponse'
        "202":
          description: User already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Check if user exists
      tags:
      - NoAuth
  /api/noauth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user with the provided login information.
      parameters:
      - description: Login information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/noauth.LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/noauth.RegisterUserResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Log in a user
      tags:
      - NoAuth
  /api/noauth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided registration information.
      parameters:
      - description: Registration information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/noauth.RegisterBody'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            $ref: '#/definitions/noauth.RegisterUserResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new user
      tags:
      - NoAuth
  /tapi/example/helloworld:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ping example
      tags:
      - example
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
