// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/admin/": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Sets the authenticated user as an admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Set a user as admin",
                "responses": {
                    "200": {
                        "description": "Admin status set successfully",
                        "schema": {
                            "$ref": "#/definitions/admin.AdminResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/user/ping": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns a \"pong\" message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.MessageResponse"
                        }
                    }
                }
            }
        },
        "/api/bot/": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new bot with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bot"
                ],
                "summary": "Create a new bot",
                "parameters": [
                    {
                        "description": "Bot request body",
                        "name": "botRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bot.BotRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bot created successfully",
                        "schema": {
                            "$ref": "#/definitions/bot.BotStructResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/bot/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing bot with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bot"
                ],
                "summary": "Update an existing bot",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Bot ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Bot request body",
                        "name": "botRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bot.BotUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bot updated successfully",
                        "schema": {
                            "$ref": "#/definitions/bot.BotStructResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/noauth/check": {
            "post": {
                "description": "Checks if a user exists based on the provided registration information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NoAuth"
                ],
                "summary": "Check if user exists",
                "parameters": [
                    {
                        "description": "Check user request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/noauth.CheckUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User does not exist",
                        "schema": {
                            "$ref": "#/definitions/noauth.StatusResponse"
                        }
                    },
                    "202": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/noauth/login": {
            "post": {
                "description": "Logs in a user with the provided login information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NoAuth"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "Login information",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/noauth.LoginBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "schema": {
                            "$ref": "#/definitions/noauth.RegisterUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/noauth/register": {
            "post": {
                "description": "Creates a new user with the provided registration information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NoAuth"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "Registration information",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/noauth.RegisterBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/noauth.RegisterUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/bot": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves a list of all bots for user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bot"
                ],
                "summary": "Get a list of all bots",
                "responses": {
                    "200": {
                        "description": "List of bots retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/bot.BotStructArrayResponse"
                        }
                    },
                    "400": {
                        "description": "Error getting bots",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tapi/example/helloworld": {
            "get": {
                "description": "do ping",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "example"
                ],
                "summary": "ping example",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "admin.AdminResponse": {
            "type": "object",
            "properties": {
                "isAdmin": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/admin.UserResponse"
                }
            }
        },
        "admin.UserResponse": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "admin": {
                    "type": "boolean"
                },
                "mail": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "bot.BotRequest": {
            "type": "object",
            "required": [
                "name",
                "platform"
            ],
            "properties": {
                "botLink": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "bot.BotResponse": {
            "type": "object",
            "required": [
                "name",
                "platform"
            ],
            "properties": {
                "_id": {
                    "type": "string"
                },
                "botLink": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "bot.BotStructArrayResponse": {
            "type": "object",
            "properties": {
                "bots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/bot.BotResponse"
                    }
                }
            }
        },
        "bot.BotStructResponse": {
            "type": "object",
            "properties": {
                "bot": {
                    "$ref": "#/definitions/bot.BotResponse"
                }
            }
        },
        "bot.BotUpdateRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "noauth.CheckUserRequest": {
            "type": "object",
            "properties": {
                "mail": {
                    "type": "string"
                }
            }
        },
        "noauth.LoginBody": {
            "type": "object",
            "required": [
                "mail",
                "password"
            ],
            "properties": {
                "mail": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "noauth.RegisterBody": {
            "type": "object",
            "required": [
                "mail",
                "name",
                "password"
            ],
            "properties": {
                "mail": {
                    "type": "string"
                },
                "name": {
                    "description": "json tag to de-serialize json body",
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "noauth.RegisterUserResponse": {
            "type": "object",
            "properties": {
                "session": {
                    "$ref": "#/definitions/noauth.Session"
                },
                "status": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/noauth.User"
                }
            }
        },
        "noauth.Session": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "expire": {
                    "type": "integer"
                }
            }
        },
        "noauth.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "noauth.User": {
            "type": "object",
            "properties": {
                "mail": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "user.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "pong"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
